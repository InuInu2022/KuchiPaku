// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using KuchiPaku.Models;
//
//    var ymmCharacter = YmmCharacter.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace KuchiPaku.Models;



public partial class YmmCharacter
{
	[JsonProperty("Name")]
	public string Name { get; set; }

	[JsonProperty("Voice")]
	public Voice Voice { get; set; }

	[JsonProperty("TachieType")]
	public string TachieType { get; set; }

	[JsonProperty("TachieCharacterParameter")]
	public TachieCharacterParameter TachieCharacterParameter { get; set; }

	[JsonProperty("TachieDefaultItemParameter")]
	public TachieDefaultParameter TachieDefaultItemParameter { get; set; }

	[JsonProperty("TachieDefaultFaceParameter")]
	public TachieDefaultParameter TachieDefaultFaceParameter { get; set; }
}

public partial class TachieCharacterParameter
{
	[JsonProperty("$type")]
	public string Type { get; set; }

	[JsonProperty("Directory")]
	public string Directory { get; set; }

	[JsonProperty("EyeBlinkStart")]
	public long EyeBlinkStart { get; set; }

	[JsonProperty("EyeBlinkInterval")]
	public long EyeBlinkInterval { get; set; }

	[JsonProperty("MouthSensitivity")]
	public long MouthSensitivity { get; set; }
}

public partial class TachieDefaultParameter
{
	[JsonProperty("$type")]
	public string Type { get; set; }

	[JsonProperty("EyeAnimation", NullValueHandling = NullValueHandling.Ignore)]
	public string EyeAnimation { get; set; }

	[JsonProperty("MouthAnimation", NullValueHandling = NullValueHandling.Ignore)]
	public string MouthAnimation { get; set; }

	[JsonProperty("Eyebrow")]
	public string Eyebrow { get; set; }

	[JsonProperty("Eye")]
	public string Eye { get; set; }

	[JsonProperty("Mouth")]
	public string Mouth { get; set; }

	[JsonProperty("Hair")]
	public string Hair { get; set; }

	[JsonProperty("Complexion")]
	public string Complexion { get; set; }

	[JsonProperty("Body")]
	public string Body { get; set; }

	[JsonProperty("Back1")]
	public string Back1 { get; set; }

	[JsonProperty("Back2")]
	public string Back2 { get; set; }

	[JsonProperty("Back3")]
	public string Back3 { get; set; }

	[JsonProperty("Etc1")]
	public string Etc1 { get; set; }

	[JsonProperty("Etc2")]
	public string Etc2 { get; set; }

	[JsonProperty("Etc3")]
	public string Etc3 { get; set; }

	[JsonProperty("IsHiddenWhenNoSpeech", NullValueHandling = NullValueHandling.Ignore)]
	public bool? IsHiddenWhenNoSpeech { get; set; }
}

public partial class Voice
{
	[JsonProperty("API")]
	public string Api { get; set; }

	[JsonProperty("Arg")]
	public string Arg { get; set; }
}

public partial class YmmCharacter
{
	public static YmmCharacter FromJson(string json) => JsonConvert.DeserializeObject<YmmCharacter>(json, KuchiPaku.Models.Converter.Settings);
}

public static class Serialize
{
	public static string ToJson(this YmmCharacter self) => JsonConvert.SerializeObject(self, KuchiPaku.Models.Converter.Settings);
}

internal static class Converter
{
	public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
	{
		MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
		DateParseHandling = DateParseHandling.None,
		Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
	};
}

